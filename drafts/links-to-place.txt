Here's a place to stack links whose appropriate home I don't know yet:


I'm a firm believer that many things don't need a computer at all.
https://calmtech.com has a nice articulation of that concept (and seems to
roughly align with my instincts about how technology should work [though I like
having details more than they do, I think, usually available by drilling down
past the core status signals]). This one probably deserves its own essay.


A summary of what techniques actually matter for software quality (keep your
team happy, not-overworked, and well-rested), based on what the research tells
us: https://increment.com/teams/the-epistemology-of-software-quality/


http://rachelbythebay.com/w/2019/11/10/scale/ - a wonderful story of how
autoscaling can bite you in the butt.


https://www.jefftk.com/p/shared-cache-is-going-away - caches are no longer
shared across domains as that turns out to be a security leak, so there's no
longer any point to pulling files from a third-party JS CDN (if there ever was
at all).


I should read through The Programmer's Stone and see if parts of it are
relevant for linking: http://programmersstone.com/


I should also finish reading through The Codeless Code, which has some
magnificent bits. Reminiscent of The Tao of Programming.
http://thecodelesscode.com/contents


https://mobile.twitter.com/mcfunley/status/1194713711337852928 is a glorious
overview of how not to scale a website, and how not to choose your technology
stack. I feel like it's a good example of the risks of abstraction and why POCs
are useful (if they'd written one and tested it at scale by forwarding copies
of requests from their LBs, they'd have realized it didn't work).


In the "how to do a specific technical job" category, here's a nice overview of
how to monitor MySQL/MariaDB queries in progress:
https://www.spinellis.gr/blog/20191103/

The fact that I don't know where to put the query tracking link suggests that
maybe I need a 'Trivia' section where I just keep specific knowledge of
technical things I want to remember? Might sort of pollute the spirit of the
site, not sure. Flip side is, the site is fundamentally about how I program,
and looking up technical trivia instead of memorizing it is a big part of that.
Ah - I now know that the *pointer* to these things belongs in reference sheets
that are exported into my Anki deck (so I remember they exist).


I have nowhere discussed the power of plain text. I'm a huge fan of it, so I
probably should. I want to dig through this link to see what's interesting
there: https://plaintextproject.online/articles.html


Here's a link I think might be worth pondering, not one I'm already convinced
belongs on the site. Proposes a format for capturing architectural decisions
that's clearly modeled on the classic user story format ("As an administrator,
I want to ban spammers so that my good commenters don't abandon the forum"):
https://adr.github.io/


RFC 7282 contains a lot of deep insight about how to make sure all views are
heard and accomodated in a large, decentralized organization. That could be
helpful for technical leads in large orgs (though also for anyone in a position
of power in a large organization): https://tools.ietf.org/html/rfc7282


Dan Luu has a ton of great stuff, but some standouts are:

* https://danluu.com/keyboard-v-mouse/ on whether keyboards or mice are
  actually consistently faster

* https://danluu.com/empirical-pl/ on studies about whether static or
  dynamically typed languages have generally lower defect rates

* https://danluu.com/testing/ on automated testing and how to make programs
  better with it (he does not subscribe to the "write lots of unit tests"
  worldview)


This post on rethinking the terminal UI is really fascinating and mirrors some
thoughts I've had myself: https://blog.repl.it/clui


This piece has some interesting ideas on what you can do with Avahi in a
production server farm:
https://gnaneshkunal.github.io/avahi-docker-non-root.html


A post on time management for developers that mirrors a lot of my recent
attempts to improve: https://www.stevestreeting.com/2010/09/04/work-2-0/


Multiformats are a cool concept - some standard data structure formats that try
to ensure reasonable forwards-compatibility, come the day you have to, e.g.,
upgrade your password hashing format. https://multiformats.io/
